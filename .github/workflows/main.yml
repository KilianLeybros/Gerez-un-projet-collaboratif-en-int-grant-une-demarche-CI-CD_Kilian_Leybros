name: CI/CD BobApp

on:
  pull_request:          
    branches:
      - '*'             
  push:                  
    branches:
      - master

jobs:
  backend:
    name: Test du backend et annalyse sonar cloud
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:

      # Récupération du code   
      - name: Récupération du code
        uses: actions/checkout@v4

      # Java setup  
      - name: Java setup
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Installation des dépendences et test backend    
      - name: Installation des dépendences et test backend
        run: mvn clean install
        working-directory: back

      # Récupération du rapport de couverture XML
      - name: Récupération du rapport de couverture XML
        uses: actions/upload-artifact@v4
        with:
          name: jacoco
          path: back/target/site/jacoco/jacoco.xml

      # Vérifie si le projet SonarCloud existe, sinon on le crée 
      - name: Vérifie si le projet SonarCloud existe, sinon on le crée
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Token length: ${SONAR_TOKEN}"
          # Vérifier si le projet existe
          response=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/projects/search?organization=${{ secrets.SONAR_ORGANIZATION }}&projects=${{ secrets.SONAR_PROJECT_KEY_BACKEND }}")
          total=$(echo "$response" | jq '.paging.total')

          #Si le projet n'existe pas 
          if [ -z "$total" ] || [ "$total" -eq "0" ]; then
            curl -X POST -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/projects/create?organization=${{ secrets.SONAR_ORGANIZATION }}&project=${{ secrets.SONAR_PROJECT_KEY_BACKEND }}&name=${{ secrets.SONAR_PROJECT_NAME_BACK }}"
          else
            echo "Le projet existe déja."
          fi

      # Mise en cache de SonarCloud
      - name: Mise en cache de SonarCloud
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Analyse de sonar cloud backend
      - name: Analyse de sonar cloud backend
        working-directory: back
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
         mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.host.url=https://sonarcloud.io

  frontend:
    name: Test du frontend et annalyse sonar cloud
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      # Récupération du code 
      - name: Récupération du code
        uses: actions/checkout@v4
        
      # Node.js setup
      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Java setup
      - name: Java setup
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Installation des dépendances  
      - name: Installation des dépendances
        run: npm install
        working-directory: front

      # Test front
      - name: Test front
        run: npm run test
        working-directory: front
        
      # Récupération du dossier avec les rapports de couvertures
      - name: Récupération du dossier avec les rapports de couvertures
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: front/coverage

      # Vérifie si le projet SonarCloud existe, sinon on le crée
      - name: Vérifie si le projet SonarCloud existe, sinon on le crée
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Token length: ${SONAR_TOKEN}"
          # Vérifier si le projet existe
          response=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/projects/search?organization=${{ secrets.SONAR_ORGANIZATION }}&projects=${{ secrets.SONAR_PROJECT_KEY_FRONTEND }}")
          total=$(echo "$response" | jq '.paging.total')

          #Si le projet n'existe pas 
          if [ -z "$total" ] || [ "$total" -eq "0" ]; then
            curl -X POST -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/projects/create?organization=${{ secrets.SONAR_ORGANIZATION }}&project=${{ secrets.SONAR_PROJECT_KEY_FRONTEND }}&name=${{ secrets.SONAR_PROJECT_NAME_FRONT }}"
          else
            echo "Le projet existe déja."
          fi

      # Mise en cache de SonarCloud
      - name: Mise en cache de SonarCloud
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      # Analyse de sonar cloud frontend
      - name: Analyse de sonar cloud frontend
        working-directory: front
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_FRONTEND }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.sourceEncoding=UTF-8 \

  docker-build:
    name: Build des images docker et publication sur Docker Hub
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    # Checkout du code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Installation de Docker Compose
    - name: Installation de Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        
    # Connexion à Docker Hub
    - name: Connexion à Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    # Build des images Docker
    - name: Build des images Docker
      run: docker-compose -f docker-compose.yaml build

    # Tag des images Docker
    - name: Tag des images Docker
      run: |
        docker tag bobapp-frontend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/bobapp-frontend:latest
        docker tag bobapp-backend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/bobapp-backend:latest

    # Pousser les images sur Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/bobapp-frontend:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/bobapp-backend:latest
